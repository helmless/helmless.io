{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"architecture/","title":"Helmless Architecture","text":"<p>In a nutshell, Helmless is a workflow for templating a custom Helm chart into the cloud provider's specific configuration, and then deploying it using the cloud provider's CLI.</p> <p>Simple but very powerful and adoptable to every cloud provider and CI/CD platform.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"architecture/#google-cloud-run","title":"Google Cloud Run","text":"<p>Helmless has been battle tested internally using Google Cloud Run and serves hundreds of containers and production deployments every day. That's why the documentation focuses on Google Cloud Run and it currently is the only platform supported out of the box.</p> <p>Google Cloud Run is a fully managed container platform that allows you to deploy and scale your containers in a serverless way. Under the hood it uses the Knative to provide it's serverless platform. In the Google Cloud Run documentation you can find the full YAML specification that is templated by our Google Cloud Run Helmless chart.</p>"},{"location":"architecture/#extending-to-other-platforms","title":"Extending to other platforms","text":"<p>Other cloud providers offer their own serverless platforms, like AWS ECS, AWS Fargate, Azure Container Apps, etc. which all support their own YAML specifications.</p> <p>AWS for example offers to use AWS CloudFormation to template your infrastructure as code. By creating a custom Helmless chart that renders into the AWS CloudFormation YAML specification, you can easily deploy your container to AWS as well.</p> <p>Contributing other platforms</p> <p>If you want to extend Helmless to other platforms, we kindly ask you to get in touch and contribute to the project.</p> <ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"getting-started/","title":"What is Helmless?","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>Helmless is an open-source project that brings the power and simplicity of Helm to serverless deployments. It provides a familiar GitOps workflow for deploying containerized applications to serverless platforms like Google Cloud Run, without the complexity of Kubernetes or the verbosity of Terraform.</p>"},{"location":"getting-started/#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/#1-helm-based-deployments","title":"1. Helm-Based Deployments","text":"<p>Helmless uses Helm charts as the foundation for deployments, providing:</p> <ul> <li>Familiar templating - Use the same Helm syntax you already know</li> <li>Value overrides - Manage environment-specific configurations</li> <li>Version control - Track changes and rollback deployments</li> <li>Package management - Share and reuse deployment configurations</li> </ul>"},{"location":"getting-started/#2-direct-serverless-integration","title":"2. Direct Serverless Integration","text":"<p>Unlike traditional Helm charts that target Kubernetes, Helmless:</p> <ul> <li>Templates charts directly into cloud provider configurations</li> <li>Deploys using native cloud provider CLIs</li> <li>Bypasses the need for a Kubernetes cluster</li> <li>Maintains cloud-native best practices</li> </ul>"},{"location":"getting-started/#3-gitops-workflow","title":"3. GitOps Workflow","text":"<p>Helmless embraces GitOps principles by:</p> <ul> <li>Storing configuration as code</li> <li>Automating deployments through CI/CD</li> <li>Providing audit trails through Git history</li> <li>Enabling collaboration through pull requests</li> </ul>"},{"location":"getting-started/#how-it-works","title":"How It Works","text":"<p>At its core, Helmless follows a simple workflow:</p> <pre><code>graph LR\n    A[Helm Chart] --&gt; B[Template Action]\n    B --&gt; C[Cloud Provider\n    Manifest]\n    C --&gt; D[Deploy Action]\n    D --&gt; E[Serverless\n    Platform]</code></pre> <ol> <li>Template: Convert Helm charts to cloud provider configurations</li> <li>Validate: Ensure configurations meet platform requirements</li> <li>Deploy: Use cloud provider CLIs for direct deployment</li> <li>Monitor: Track deployment status and health</li> </ol>"},{"location":"getting-started/#key-components","title":"Key Components","text":"<p>Helmless consists of several specialized components:</p>"},{"location":"getting-started/#charts","title":"Charts","text":"<p>Cloud provider-specific Helm charts that define your application deployment:</p>"},{"location":"getting-started/#actions","title":"Actions","text":"<p>GitHub Actions that handle templating and deployment:</p>"},{"location":"getting-started/#infrastructure-modules","title":"Infrastructure Modules","text":"<p>Supporting infrastructure components:</p>"},{"location":"getting-started/#benefits-over-alternatives","title":"Benefits Over Alternatives","text":""},{"location":"getting-started/#vs-kubernetes","title":"vs. Kubernetes","text":"<ul> <li>No cluster management overhead</li> <li>Faster deployments</li> <li>Lower operational costs</li> <li>Simplified scaling</li> </ul>"},{"location":"getting-started/#vs-terraform","title":"vs. Terraform","text":"<ul> <li>More concise configurations</li> <li>Faster deployment cycles</li> <li>Familiar templating syntax</li> <li>Better developer experience</li> </ul>"},{"location":"getting-started/#vs-platform-specific-tools","title":"vs. Platform-Specific Tools","text":"<ul> <li>Cloud-agnostic approach</li> <li>Standardized workflow</li> <li>Reusable configurations</li> <li>Community-driven development</li> </ul>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Ready to try Helmless? Follow these steps:</p> <ol> <li>Choose your platform - Start with Google Cloud Run</li> <li>Install the tools - Set up Helm and cloud provider CLIs</li> <li>Configure your repository - Add GitHub Actions workflows</li> <li>Deploy your first application - Follow our quickstart guide</li> </ol> <p>For detailed instructions, check out our Google Cloud Run Guide.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the Architecture</li> <li>Explore Example Deployments</li> <li>Join our Community</li> </ul>"},{"location":"what-is-helmless/","title":"What is Helmless?","text":"<p>Helmless is a workflow and collection of resources that allows you to deploy serverless containers to Google Cloud Run, and potentially other platforms (1), with Helm, bypassing the complexity of Kubernetes and Terraform.</p> <ol> <li> See the extending to other platforms page for more information.</li> </ol> <p>It takes a container specification in the form of a Helm chart and a values file, and uses the templating feature of Helm to generate a Cloud Run configuration. This configuration is then deployed using the Cloud Run CLI.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre> <p>Helmless gives you a powerful serverless deployment workflow that is:</p> <ul> <li>\ud83c\udfaf Simple but powerful - Helm-based workflows without Kubernetes complexity</li> <li>\u26a1 Fast and efficient - Direct serverless deployments with minimal overhead</li> <li>\ud83d\udd12 Secure by default - Built-in security best practices and workload identity</li> <li>\ud83c\udf10 Cloud agnostic - Works across major cloud providers</li> <li>\ud83e\udd1d Open Source - Community-driven and built to evolve</li> </ul>"},{"location":"what-is-helmless/#getting-started","title":"Getting Started","text":"<ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"what-is-helmless/#why-helm","title":"Why Helm?","text":"<p>Helm is a great tool for managing containerized applications, and its templating feature offers a great developer experience. It allows you to define your application container specification in a very simple YAML file and gives the platform teams an easy way to add abstraction and customization on top of it, making container-based deployments a breeze.</p> .hemless/values.yaml"},{"location":"what-is-helmless/#why-no-kubernetes","title":"Why no Kubernetes?","text":"<p>Helm, and for this project its templating feature, offers a great developer experience for managing containerized applications. However by default Helm is built for Kubernetes, which brings a lot of overhead and complexity for container-based deployments, where often times you don't need the full power of Kubernetes. And small teams and organizations often don't have the resources to maintain a production-grade Kubernetes cluster.</p> <p>Helmless aims to give you the developer experience of Helm, without the overhead of Kubernetes.</p>"},{"location":"what-is-helmless/#why-no-terraform","title":"Why no Terraform?","text":"<p>Terraform is a great tool for managing infrastructure as code, but especially for frequent deployments it quickly becomes a bottleneck. Infrastructure changes should be carefully managed and gated, and not be a part of the fast feedback loop that developers expect for deploying their own code as an application container.</p> <p>This is where Helmless comes in. It decouples the container deployment from the infrastructure deployment, and allows you to use the great developer experience of Helm for application deployments, while leaving the infrastructure management to other tools, like Terraform. By defining the container specification directly inside your application repository and by using the standard CI/CD pipeline, you can frequently deploy your application without waiting for the long approval process of infrastructure changes done in Terraform.</p>"},{"location":"what-is-helmless/#repositories","title":"Repositories","text":"<p>Helmless is open source and welcomes contributions! The project consists of several focused repositories:</p> <ul> <li>helmless: The home of helmless.io</li> <li>google-cloudrun-chart: Helm chart for Google Cloud Run</li> <li>template-action: GitHub Action for templating</li> <li>google-cloudrun-deploy-action: Deployment action</li> <li>google-cloudrun-tf-module: Supporting infrastructure module</li> <li>google-workload-identity-tf-module: Identity and security module</li> </ul>"},{"location":"_partials/architectur-diagram/","title":"Architectur diagram","text":"<pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"_partials/getting-started_grid/","title":"Getting started grid","text":"<ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/","title":"Documentation","text":"<p>Welcome to the Helmless documentation.</p> <ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/cloudrun/","title":"Helmless Chart for Google Cloud Run","text":"<p>This Helmless chart generates a manifest compatible with Google Cloud Run's YAML specification, which can then be deployed using the <code>gcloud run services replace</code> command or the helmless/google-cloudrun-deploy-action. Head to the documentation for more information.</p>"},{"location":"docs/cloudrun/#prerequisites","title":"Prerequisites","text":"<ul> <li>Helm v3.x</li> <li>Google Cloud SDK</li> <li>Access to a Google Cloud project and permissions to deploy to Google Cloud Run</li> <li>The <code>run.googleapis.com</code> API enabled on your project</li> </ul>"},{"location":"docs/cloudrun/#usage","title":"Usage","text":"<p>If you are new to Helmless I suggest you head to the documentation first. If you want to learn by doing or are already familiar with Helmless, continue reading.</p> <ol> <li>You will need to create a <code>values.yaml</code> file to configure your deployment.</li> </ol> <pre><code>cat &lt;&lt;EOF &gt; values.yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/helmless/google-cloudrun-chart/main/values.schema.json\nname: 'my-helmless-service'\nregion: 'us-central1'\nimage: 'us-docker.pkg.dev/cloudrun/container/hello:latest'\nenv:\n  COLOR: 'blue'\nautoscaling:\n  minScale: 0\nEOF\n</code></pre> <ol> <li>Render the manifest using <code>helm template</code>:</li> </ol> <pre><code>helm template oci://ghcr.io/helmless/google-cloudrun -f values.yaml &gt; cloudrun_manifest.yaml\n</code></pre> <ol> <li>Deploy the manifest using <code>gcloud run services replace</code>:</li> </ol> <pre><code>gcloud run services replace cloudrun_manifest.yaml\n</code></pre> <ol> <li>To clean up and delete the service, run the following command:</li> </ol> <pre><code>gcloud run services delete my-helmless-service --region=us-central1\n</code></pre>"},{"location":"docs/cloudrun/#configuration-reference","title":"Configuration Reference","text":"<p>You can find the full configuration reference for the Helm chart in the docs/values.md file.</p>"},{"location":"docs/cloudrun/advanced/","title":"Advanced Deployment Guide","text":"<p>Work in Progress</p> <p>This guide is a work in progress.</p>"},{"location":"docs/cloudrun/ci-cd/","title":"CI/CD","text":"<p>Helmless is designed to be used in any CI/CD pipeline to deploy your container to the cloud provider of your choice. Since we use Github Actions as our CI/CD platform of choice, this guide will show you how to deploy your container to Google Cloud Run using Github Actions.</p> <p>Helmless provides a Github Action that you can use in your workflow to deploy your container to Google Cloud Run.</p> <p>Contributing other CI/CD Platforms</p> <p>If you want to extend Helmless to other CI/CD platforms, we kindly ask you to get in touch and contribute to the project.</p>"},{"location":"docs/cloudrun/ci-cd/#prerequisites","title":"Prerequisites","text":"<p>Before you can start using Github Actions to deploy your container to Google Cloud Run, you need to allow your Github repository access to your GCP project.</p>"},{"location":"docs/cloudrun/ci-cd/#github-workload-identity-federation","title":"Github Workload Identity Federation","text":"<p>To allow your Github repository to access your GCP project, you need to setup Github Workload Identity Federation. To make this as easy as possible, we created a small Terraform module that can be used to setup the necessary resources in your GCP project.</p> <p>Deploy it however you deploy your  infrastructure and make sure to update the <code>github_organization</code> variable to match your Github organization.</p> workload-identity.tf<pre><code>module \"github_federation\" {\n  source              = \"github.com/helmless/google-workload-identity-federation-terraform-module?ref=v0.1.0\"\n  github_organization = \"helmless\"\n}\n</code></pre> <p>Applying this module you will get:</p> <ul> <li>a workload identity pool (1)</li> <li>a workload identity provider for your Github repository (2)<ul> <li>that only allows repositories in your Github organization to authenticate with the workload identity pool</li> </ul> </li> </ul> <ol> <li>A workload identity pool is a container for your workload identities. It uses the <code>google_iam_workload_identity_pool</code> Terraform resource.</li> <li>A workload identity provider is a reference to the Github OIDC identity provider. It uses the <code>google_iam_workload_identity_pool_provider</code> Terraform resource and is scoped to only allow tokens issued by Github and from repositories in your specified organization.</li> </ol>"},{"location":"docs/cloudrun/ci-cd/#grant-the-github-repository-the-necessary-permissions","title":"Grant the Github Repository the necessary permissions","text":"<p>After setting up the workload identity federation, you need to grant the Github repository the necessary permissions to access your GCP project. You do this by giving the <code>principalSet</code> scoped to the repository the <code>roles/iam.workloadIdentityUser</code> role on the GCP projects default service account that is used by Cloud Run. And it will need <code>roles/run.admin</code> permissions on the Cloud Run project where you want to deploy your container.</p> <p>Important</p> <p>These permissions are quick start permissions to get you up and running quickly. In production you should scope those permissions to the individual resources you want to deploy and give each Cloud Run service its own service account. (1)</p> <ol> <li>See the advanced deployment guide for more information.</li> </ol> iam.tf<pre><code>locals {\n    repositories = [\"your-repository\"]\n    # This prefixes all repositories with the correct `principalSet` and attribute mapping.\n    repository_principals = { for repository in local.repositories : repository =&gt; \"${module.github_federation.repository_principal_set_id_prefix}/${repository}\" }\n}\n\ndata \"google_project\" \"project\" {}\n\n# This grants the `principalSet` the `roles/run.admin` role on the GCP project.\nresource \"google_project_iam_member\" \"project\" { (2)\n  for_each = local.repository_principals\n  project  = data.google_project.project.project_id\n  role     = \"roles/run.admin\"\n  member   = each.value\n}\n\n# This grants the `principalSet` the `roles/iam.serviceAccountUser` role on the GCP projects default service account.\nresource \"google_service_account_iam_member\" \"cloud_run_v2\" { (3)\n  for_each = local.repository_principals\n\n  service_account_id = \"projects/${data.google_project.project.project_id}/serviceAccounts/${data.google_project.project.number}-compute@developer.gserviceaccount.com\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = each.value\n}\n</code></pre> <p>Now run the following command to get the <code>GCP_WORKLOAD_IDENTITY_POOL</code>:</p> <pre><code>gcloud iam workload-identity-pools providers list --location=global --workload-identity-pool=github\n</code></pre> <p>This should return something like this which you will need to set as a Github secret in your repository.</p> <pre><code>projects/YOUR_PROJECT_ID/locations/global/workloadIdentityPools/github/providers/github-oidc\n</code></pre> <p>Success</p> <p>You have now setup the necessary resources to allow your Github repository to access your GCP project and to deploy your container to Google Cloud Run.</p>"},{"location":"docs/cloudrun/ci-cd/#github-actions","title":"Github Actions","text":"<p>Helmless provides a custom Github Action that you can use in your workflow to deploy your container to Google Cloud Run. But before you can use it you need to setup the correct permissions for the Github Action to access your Google Cloud Run project.</p> deploy.yml"},{"location":"docs/cloudrun/getting-started/","title":"Getting Started","text":"<p>In this guide you will learn how to deploy a simple Hello World image to Google Cloud Run using Helmless. Read what is Helmless first if you want to understand how it works. See the architecture for more information on how to adopt it to other cloud providers.</p> <p>Deploying from a CI/CD pipeline is covered in a later guide.</p>"},{"location":"docs/cloudrun/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google Cloud account</li> <li>The Google Cloud CLI</li> <li>The Helm CLI</li> </ul>"},{"location":"docs/cloudrun/getting-started/#setting-up-the-configuration","title":"Setting up the Configuration","text":"<p>Helmless uses the Helm pattern of a <code>values.yaml</code> file to configure the service. You can store this anywhere in your repository, but for this example we will use the <code>config</code> directory.</p> <p>Create a <code>config/values.yaml</code> file, with the following content:</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/helmless/cloudrun/main/values.schema.json\nname: tutorial-service\nimage: 'us-docker.pkg.dev/cloudrun/container/hello'\nenv:\n  COLOR: 'blue'\n</code></pre> <ul> <li><code>yaml-language-server</code> is used to provide syntax highlighting and validation for the <code>values.yaml</code> file</li> <li><code>name</code> is the name of the service and must be unique per project</li> <li><code>image</code> is the URL to the Docker image you want to deploy</li> <li><code>env</code> is an optional set of environment variables to pass to the service</li> </ul> <p>Full Chart Specification</p> <p>You can find the full chart specification and all supported configuration options on GitHub.</p>"},{"location":"docs/cloudrun/getting-started/#deploying-the-service","title":"Deploying the Service","text":"<p>To deploy the service you need to template the Helm chart into a Cloud Run service and then use the Google Cloud CLI to deploy it.</p>"},{"location":"docs/cloudrun/getting-started/#templating-the-helm-chart","title":"Templating the Helm Chart","text":"<p>Use <code>helm template</code> command and our custom Helmless Cloud Run chart to template your <code>values.yaml</code> into a Cloud Run YAML<sup>1</sup> specification.</p> <pre><code>helm template oci://ghcr.io/helmless/cloudrun -f config/values.yaml --output-dir out/\n</code></pre> <ul> <li><code>helm template</code> is the command to template a Helm chart</li> <li><code>oci://ghcr.io/helmless/cloudrun</code> is the URL to our Helmless Cloud Run chart in GitHub Container Registry</li> <li><code>-f config/values.yaml</code> uses the <code>values.yaml</code> file in the <code>config</code> directory as the configuration for the service</li> <li><code>--output-dir out/</code> writes the templated Cloud Run YAML specification to the <code>out</code> directory</li> </ul> <p>You should now have a <code>out/cloudrun/templates/cloudrun.yaml</code> file that looks like this:</p> View the complete YAML output <pre><code>---\n# Source: cloudrun/templates/cloudrun.yaml\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n    name: tutorial-service\n    labels:\n    annotations:\n      run.googleapis.com/launch-stage: GA\n      run.googleapis.com/ingress: all\n      run.googleapis.com/region: europe-west1\n  spec:\n    template:\n      metadata:\n        annotations:\n          run.googleapis.com/execution-environment: gen2\n          run.googleapis.com/cpu-throttling: \"true\"\n          autoscaling.knative.dev/maxScale: \"100\"\n      spec:\n        containerConcurrency: 80\n        timeoutSeconds: 300\n        containers:\n          - image: us-docker.pkg.dev/cloudrun/container/hello\n            env:\n              - name: \"COLOR\"\n                value: \"blue\"\n            resources:\n              limits:\n                cpu: \"1\"\n                memory: \"512Mi\"\n            ports:\n              - containerPort: 8080\n            livenessProbe:\n              failureThreshold: null\n              httpGet:\n                path: /\n                port: 8080\n              initialDelaySeconds: null\n              periodSeconds: null\n            readinessProbe:\n              failureThreshold: null\n              httpGet:\n                path: /\n                port: 8080\n              initialDelaySeconds: null\n              periodSeconds: null\n            startupProbe:\n              failureThreshold: null\n              httpGet:\n                path: /\n                port: 8080\n              initialDelaySeconds: null\n              periodSeconds: null\n</code></pre>"},{"location":"docs/cloudrun/getting-started/#deploying-the-service_1","title":"Deploying the Service","text":"<p>Use the Google Cloud CLI to deploy the templated Cloud Run YAML specification to Google Cloud Run.</p> <p>First login to Google Cloud and set the project and region<sup>2</sup> you want to deploy the service to.</p> <pre><code>gcloud auth login\ngcloud config set project &lt;your-project-id&gt;\ngcloud config set run/region &lt;your-region&gt; # e.g. europe-west1\n</code></pre> <p>Then deploy the service using the <code>gcloud run services replace</code> command.</p> <pre><code>gcloud run services replace out/cloudrun/templates/cloudrun.yaml\n</code></pre> <p>You should see an output like the following:</p> <pre><code>Applying new configuration to Cloud Run service [tutorial-service] in project [...] region [...]\n\u2713 Deploying new service... Done.\n  \u2713 Creating Revision...\n  \u2713 Routing traffic...\nDone.\nNew configuration has been applied to service [tutorial-service].\nURL: https://tutorial-service-836227714099.europe-west1.run.app\n</code></pre> <p>But when you navigate to the URL you'll see a <code>Error: Forbidden</code> page. This is because the service is not publicly accessible by default.</p> <p>To access your service locally without exposing it to the public internet, you can use Cloud Run proxy.</p> <pre><code>gcloud run services proxy tutorial-service\n</code></pre> <p>Tada! \ud83e\udd73</p> <p>You can now see your Cloud Run service in action when navigating to <code>http://localhost:8080</code>.</p>"},{"location":"docs/cloudrun/getting-started/#cleaning-up","title":"Cleaning up","text":"<p>You can delete the service using the <code>gcloud run services delete</code> command.</p> <pre><code>gcloud run services delete tutorial-service\n</code></pre>"},{"location":"docs/cloudrun/getting-started/#next-steps","title":"Next Steps","text":"<p>From here you can head back to the overview to learn more about Helmless for Google Cloud Run or jump to the next guide to learn how to deploy from a CI/CD pipeline using Github Actions.</p> <ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul> <ol> <li> <p>The Cloud Run YAML specification is just a standard Knative Service specification under the hood.\u00a0\u21a9</p> </li> <li> <p>The region must be a valid Google Cloud Run region. You can choose a region using the region picker.\u00a0\u21a9</p> </li> </ol>"}]}